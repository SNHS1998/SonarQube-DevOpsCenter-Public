name: CI/CD Pipeline for Salesforce with SonarCloud

on:
  push:
    branches:
      - f2qapublic
        
  pull_request:
    branches:
      - f2qapublic
    types:
      - opened
      - synchronize
      - reopened

jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Salesforce CLI
        run: npm install -g sfdx-cli

      - name: Create JWT Key File
        run: echo "${{ secrets.JWT_PRIVATE_KEY }}" > assets/server.key

      - name: Authorize Dev Hub (Production)
        run: |
          sfdx auth:jwt:grant --clientid ${{ secrets.CONSUMER_KEY_PROD }} --jwtkeyfile assets/server.key --username ${{ secrets.SALESFORCE_PROD_USERNAME }} --setdefaultdevhubusername --setalias prod

      - name: Authorize Developer Org
        run: |
          sfdx auth:jwt:grant --clientid ${{ secrets.CONSUMER_KEY_DEVELOPER }} --jwtkeyfile assets/server.key --username ${{ secrets.DEVELOPER_SANDBOX_USERNAME }} --setalias developer

      - name: Generate Package.xml for Changed Components
        id: generate_package
        run: |
          mkdir -p ./manifest
          git diff --name-only origin/main..HEAD > all-changed-components.txt
          grep "\.cls$" all-changed-components.txt | sed 's|force-app/main/default/classes/||' > changed-components.txt
          if [ -s changed-components.txt ]; then
            echo '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' > ./manifest/package.xml
            echo '<Package xmlns="http://soap.sforce.com/2006/04/metadata">' >> ./manifest/package.xml
            echo '  <types>' >> ./manifest/package.xml
            while read component; do
              echo "    <members>${component%.cls}</members>" >> ./manifest/package.xml
            done < changed-components.txt
            echo '    <name>ApexClass</name>' >> ./manifest/package.xml
            echo '  </types>' >> ./manifest/package.xml
            echo '  <version>53.0</version>' >> ./manifest/package.xml
            echo '</Package>' >> ./manifest/package.xml
            echo "::set-output name=changed::true"
          else
            echo "No Apex classes were changed."
            echo "::set-output name=changed::false"
          fi

      - name: Skip if no Apex classes changed
        if: steps.generate_package.outputs.changed == 'false'
        run: echo "No Apex classes changed. Skipping deployment and tests."
        continue-on-error: true

      - name: Run Apex Tests and Generate Coverage Report
        if: steps.generate_package.outputs.changed == 'true'
        run: |
          sfdx force:apex:test:run --testlevel RunSpecifiedTests --suitenames $(cat changed-components.txt | tr '\n' ',') --outputdir test-results --codecoverage --json --wait 60
          cat test-results/test-result-codecoverage.json

      - name: SonarQube Scan
        if: steps.generate_package.outputs.changed == 'true'
        uses: sonarsource/sonarqube-scan-action@v2.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_SCANNER_OPTS: '-Xmx1024m'
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
        with:
          args: >
            -Dsonar.projectKey=SNHS1998_SonarQube-GitHubActions
            -Dsonar.branch.name=${{ github.head_ref }}
            -Dsonar.language=apex
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.apex.coverage.reportPath=test-results/test-result-codecoverage.json
            -Dsonar.coverage.exclusions=**/*Test.cls
            -Dsonar.exclusions=**/*.cmp,**/force-app/**/fflib_*.cls,**/*.yml,**/*.js,**/*.xml,**/*.css,**/*.html,**/*.woff2,**/*.woff,**/*.auradoc,**/*.svg,force-app/main/default/staticresources/**

      - name: Check SonarQube Quality Gate
        if: steps.generate_package.outputs.changed == 'true'
        id: quality_gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          status=$(curl -s "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=SNHS1998_SonarQube-GitHubActions&branch=${{ github.head_ref }}" -u "${SONAR_TOKEN}:")
          coverage=$(echo "$status" | jq -r '.projectStatus.conditions[] | select(.metricKey == "new_coverage") | .actualValue')

          echo "Current New Code Coverage: $coverage%"

          if [ "$coverage" == "null" ]; then
            echo "New code coverage information is not available."
            exit 1
          elif (( $(echo "$coverage < 80" | bc -l) )); then
            echo "New code coverage is less than 80%. Failing the build."
            exit 1
          else
            echo "New code coverage is sufficient. Proceeding with the build."
          fi

      - name: Fail build on Quality Gate status
        if: steps.quality_gate.outcome != 'success'
        run: exit 1
