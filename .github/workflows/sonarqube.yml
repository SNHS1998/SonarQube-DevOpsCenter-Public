name: CI/CD Pipeline for Salesforce with SonarCloud

on:
  push:
    branches:
      - 'WI-*'

jobs:
  sonarqube:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Salesforce CLI
        run: npm install -g sfdx-cli

      - name: Create JWT Key File
        run: echo "${{ secrets.JWT_PRIVATE_KEY }}" > assets/server.key

      - name: Authorize Dev Hub (Production)
        run: |
          sfdx auth:jwt:grant --clientid ${{ secrets.CONSUMER_KEY_PROD }} --jwtkeyfile assets/server.key --username ${{ secrets.SALESFORCE_PROD_USERNAME }} --setdefaultdevhubusername --setalias prod

      - name: Authorize Developer Org
        run: |
          sfdx auth:jwt:grant --clientid ${{ secrets.CONSUMER_KEY_DEVELOPER }} --jwtkeyfile assets/server.key --username ${{ secrets.DEVELOPER_SANDBOX_USERNAME }} --setalias developer

      - name: Push Source to Developer Org
        run: |
          sfdx force:source:push --forceoverwrite --targetusername developer

      - name: Run Apex Tests and Generate Report
        run: |
          result=$(sfdx force:apex:test:run --resultformat json --wait 10 --targetusername developer | tee result.json)
          testrunid=$(jq -r '.result.testRunId' result.json)
          sfdx force:apex:test:report --resultformat json --testrunid "$testrunid" --outputdir test-results --targetusername developer

      - name: Convert Coverage Report to XML
        run: |
          sfdx force:apex:test:report --codecoverage --outputdir test-results --targetusername developer

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_SCANNER_OPTS: '-Xmx1024m'
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
        with:
          args: >
            -Dsonar.projectKey=YourProjectKey
            -Dsonar.apex.coverage.reportPaths=test-results/apex-codecoverage.xml

      - name: Check SonarQube Quality Gate
        id: quality_gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          status=$(curl -s "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=YourProjectKey" -u "${SONAR_TOKEN}:")
          coverage=$(echo "$status" | jq -r '.projectStatus.conditions[] | select(.metricKey == "new_coverage") | .actualValue')

          echo "Current New Code Coverage: $coverage%"

          if (( $(echo "$coverage == null" | bc -l) )); then
            echo "New code coverage information is not available."
            exit 1
          elif (( $(echo "$coverage < 80" | bc -l) )); then
            echo "New code coverage is less than 80%. Failing the build."
            exit 1
          else
            echo "New code coverage is sufficient. Proceeding with the build."
          fi

      - name: Fail build on Quality Gate status
        if: steps.quality_gate.outcome != 'success'
        run: exit 1
