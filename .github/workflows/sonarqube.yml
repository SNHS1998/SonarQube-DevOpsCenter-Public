name: CI/CD Pipeline for Salesforce with PMD and Code Coverage

on:
  push:
    branches:
      - 'WI-*'

jobs:
  analyze:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Salesforce CLI
        run: npm install -g sfdx-cli

      - name: Create JWT Key File
        run: echo "${{ secrets.JWT_PRIVATE_KEY }}" > assets/server.key

      - name: Authorize Dev Hub (Production)
        run: |
          sfdx auth:jwt:grant --clientid ${{ secrets.CONSUMER_KEY_PROD }} --jwtkeyfile assets/server.key --username ${{ secrets.SALESFORCE_PROD_USERNAME }} --setdefaultdevhubusername --setalias prod

      - name: Authorize Developer Org
        run: |
          sfdx auth:jwt:grant --clientid ${{ secrets.CONSUMER_KEY_DEVELOPER }} --jwtkeyfile assets/server.key --username ${{ secrets.DEVELOPER_SANDBOX_USERNAME }} --setalias developer

      - name: Generate Package.xml for Changed Components
        id: generate_package
        run: |
          mkdir -p ./manifest
          git diff --name-only origin/main..HEAD > all-changed-components.txt
          grep "\.cls$" all-changed-components.txt | sed 's|force-app/main/default/classes/||' > changed-components.txt
          if [ -s changed-components.txt ]; then
            echo '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' > ./manifest/package.xml
            echo '<Package xmlns="http://soap.sforce.com/2006/04/metadata">' >> ./manifest/package.xml
            echo '  <types>' >> ./manifest/package.xml
            while read component; do
              echo "    <members>${component%.cls}</members>" >> ./manifest/package.xml
            done < changed-components.txt
            echo '    <name>ApexClass</name>' >> ./manifest/package.xml
            echo '  </types>' >> ./manifest/package.xml
            echo '  <version>53.0</version>' >> ./manifest/package.xml
            echo '</Package>' >> ./manifest/package.xml
            cat ./manifest/package.xml
            echo "::set-output name=changed::true"
          else
            echo "No Apex classes were changed."
            echo "::set-output name=changed::false"
          fi

      - name: Skip if no Apex classes changed
        if: steps.generate_package.outputs.changed == 'false'
        run: echo "No Apex classes changed. Skipping deployment and tests."
        continue-on-error: true

      - name: Download PMD
        if: steps.generate_package.outputs.changed == 'true'
        run: |
          wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.41.0/pmd-bin-6.41.0.zip
          unzip pmd-bin-6.41.0.zip

      - name: Run PMD Analysis
        if: steps.generate_package.outputs.changed == 'true'
        run: |
          ./pmd-bin-6.41.0/bin/run.sh pmd -d ./force-app/main/default/classes -R pmd-rules/apex-ruleset.xml -f text -r pmd-report.txt
          cat pmd-report.txt

      - name: Check PMD Results
        if: steps.generate_package.outputs.changed == 'true'
        run: |
          if grep -q "Priority:" pmd-report.txt; then
            echo "PMD found issues in the code. Failing the build."
            exit 1
          else
            echo "No PMD issues found. Proceeding with the build."
          fi

      - name: Create test-results Directory
        if: steps.generate_package.outputs.changed == 'true'
        run: mkdir -p test-results

      - name: Run Apex Tests and Generate Coverage Report
        if: steps.generate_package.outputs.changed == 'true'
        run: |
          sfdx force:apex:test:run --targetusername developer --suitenames $(cat changed-components.txt | tr '\n' ',' | sed 's/,$//') --resultformat json --outputdir test-results --codecoverage --wait 10
          cat test-results/test-result-codecoverage.json

      - name: Calculate and Check Coverage
        if: steps.generate_package.outputs.changed == 'true'
        run: |
          totalCoveredLines=$(jq '[.result.coverage.coveredLines] | add' test-results/test-result-codecoverage.json)
          totalLines=$(jq '[.result.coverage.totalLines] | add' test-results/test-result-codecoverage.json)
          coveragePercentage=$(echo "scale=2; ($totalCoveredLines / $totalLines) * 100" | bc)
          echo "Total Covered Lines: $totalCoveredLines"
          echo "Total Lines: $totalLines"
          echo "Coverage Percentage: $coveragePercentage%"
          if (( $(echo "$coveragePercentage < 80" | bc -l) )); then
            echo "Code coverage is less than 80%. Failing the build."
            exit 1
          else
            echo "Code coverage is sufficient. Proceeding with the build."
          fi
